import pygame
import pygame_menu
import matplotlib
import sys
import random
import time
from pygame.locals import *
import json
import os
import matplotlib.pyplot as plt
import numpy as np
import cairosvg
import threading
import time
import math

from tkinter import Tk, Label
from PIL import Image, ImageTk
from datetime import datetime


htime={}
htime[4] =  [0.0, 0.003114824219999999, 0.005595089199999999, 0.00795308038, 0.01028330726, 0.012584632850000001, 0.01488027388, 0.01712540248, 0.01938927501, 0.02161554145, 0.023832605840000003, 0.02605312195999999, 0.02823787823, 0.03051262632, 0.033239320079999995]
htime[(4,10)] =  [0.0, 0.002840954299999998, 0.0052322323999999965, 0.007523677300000002, 0.009764161699999992, 0.012015141200000001, 0.014209233799999997, 0.01648731380000001, 0.01871766259999999, 0.02096305250000001, 0.02313671729999999, 0.02527969489999999, 0.0273967692, 0.0295045069, 0.03193099500000001, 0.0348178165]
htime[(4,25)] =  [0.0, 0.0029117112500000025, 0.005413908750000005, 0.007734499000000006, 0.010016531000000007, 0.012258871999999985, 0.014525124500000005, 0.01674588949999998, 0.01893920724999998, 0.02113202650000002, 0.023305120999999995, 0.02548072375000001, 0.02763428824999999, 0.029702473999999982, 0.03221916325000003, 0.03507084974999996]
htime[(4,50)] =  [0.0, 0.0030914834999999988, 0.005560185500000002, 0.007890319499999996, 0.010214997500000007, 0.012454265500000002, 0.014768022500000016, 0.016963340000000004, 0.01922038500000001, 0.021423487000000015, 0.023646887, 0.025811523499999985, 0.027921369500000005, 0.030104579000000013, 0.033006433500000015, 0.03546060950000003]
htime[(4,75)] =  [0.0, 0.0033038217500000015, 0.005683968749999992, 0.008102837250000005, 0.010517202250000005, 0.012778523749999991, 0.015040116749999999, 0.017264858999999987, 0.019528422999999958, 0.021757987250000006, 0.02394629925, 0.02611957949999997, 0.02825246774999999, 0.030536880250000002, 0.03374173125000002, 0.03602591375000001]
htime[(4,90)] =  [0.0, 0.0033978822999999993, 0.005959166900000001, 0.008384525599999996, 0.010728249999999996, 0.013134242099999997, 0.015390834400000008, 0.017628612000000023, 0.01998023720000002, 0.02218195460000005, 0.0244092979, 0.02688635770000001, 0.02924101190000002, 0.03209347939999999, 0.034811495000000005, 0.037114228699999995]
htime[6] =  [0.0, 0.00808113544, 0.015400361559999999, 0.023609146329999997, 0.03080629925, 0.038146344060000004, 0.04508301952999999, 0.05081950909, 0.05625728303000001, 0.06131886918, 0.06603054111000001, 0.07062494135000001, 0.07496155975, 0.07919841278, 0.08334137172999999, 0.08738915045, 0.0913330656, 0.09521168068000002, 0.09903324727000001, 0.10279524820000001, 0.10654598933000001, 0.11023581799999999, 0.11390995338999998, 0.11754413974, 0.12116034584999998, 0.12479141130000002, 0.12839405104999999, 0.13192681352000002, 0.13546061161, 0.13893969596, 0.14238778692, 0.14583361057000002, 0.14922079376, 0.15259368437999998, 0.15590083943]
htime[(6,10)] =  [0.0, 0.0048563884, 0.009862463899999998, 0.015909294000000004, 0.021333560299999995, 0.026110942899999965, 0.030531530199999986, 0.035974775499999986, 0.04122138929999999, 0.04736938899999998, 0.05163438729999999, 0.05608865469999999, 0.06019296769999999, 0.0643792427, 0.06856324009999998, 0.07268715229999997, 0.07665954730000007, 0.08043814570000009, 0.08447402869999998, 0.08825941469999998, 0.09201894079999992, 0.09563561899999992, 0.09928071629999993, 0.10280943979999997, 0.10669111090000004, 0.11024144670000004, 0.11373701350000008, 0.11716972059999999, 0.12086866990000006, 0.12447707990000004, 0.12799883780000004, 0.13165638310000005, 0.13519766799999997, 0.13855632630000003, 0.1418391324, 0.145081468]
htime[(6,25)] =  [0.0, 0.005512909999999999, 0.011596114499999999, 0.017980563749999998, 0.02315205975000001, 0.028788476749999972, 0.033462550250000014, 0.039505186, 0.045075710750000005, 0.05026879274999999, 0.05478335149999997, 0.05940733799999999, 0.06325717075, 0.06749192549999998, 0.071746524, 0.0756633825, 0.07944534149999996, 0.08346553599999998, 0.08745031000000003, 0.09121011350000004, 0.09491261075000001, 0.09851589750000003, 0.1020898535, 0.10594961425000002, 0.10963656125000004, 0.11342809600000003, 0.11691448050000003, 0.12051991175000006, 0.12407959100000004, 0.1275938187500001, 0.13107025275, 0.13444613175000006, 0.13774301574999992, 0.14103561624999994, 0.14437288624999997, 0.14759854700000002]
htime[(6,50)] =  [0.0, 0.007005602999999999, 0.014008717999999993, 0.02079162549999999, 0.026399401000000017, 0.03290463850000001, 0.03854236350000001, 0.04552628999999998, 0.050811871999999966, 0.05548089499999996, 0.059929591499999976, 0.06460709400000002, 0.06852266900000002, 0.07279975249999998, 0.07762875949999996, 0.081586365, 0.08521884749999999, 0.08912743, 0.09283688099999998, 0.09661344799999999, 0.100336513, 0.10402584599999998, 0.10764781749999998, 0.11123170149999999, 0.11495336549999997, 0.11847553399999998, 0.12211913399999998, 0.1258471755, 0.12941566649999997, 0.13300223, 0.13659263249999998, 0.1400320085, 0.143334384, 0.14659650200000002, 0.1498371235, 0.1531048565]
htime[(6,75)] =  [0.0, 0.009654653, 0.01745237875, 0.024609511, 0.03247812900000001, 0.04173668725000001, 0.0487093225, 0.05408334374999999, 0.06446178699999999, 0.07006356150000002, 0.07571733725, 0.07984794175000001, 0.08390436850000005, 0.08798204450000002, 0.09178033075, 0.09615372000000003, 0.09995190775000004, 0.10389529675000006, 0.10760634875000005, 0.11120918375000005, 0.11513486700000004, 0.11891024600000005, 0.12253942275000004, 0.12616497675000005, 0.12983324150000003, 0.13348494775000003, 0.137064481, 0.14061271475, 0.14412152825000002, 0.14750566874999999, 0.15104609324999996, 0.15449173125, 0.15794252074999998, 0.16139535724999998, 0.16478917075, 0.16809570124999995]
htime[(6,90)] =  [0.0, 0.013024566800000009, 0.020378083200000004, 0.0350459728, 0.04778836880000001, 0.05875820290000004, 0.0709032219, 0.076274864, 0.08001490739999999, 0.08525639259999998, 0.0890430116, 0.09472558859999997, 0.09942623289999994, 0.10323192209999991, 0.1069478664999999, 0.11096033839999996, 0.11528244619999996, 0.11909446849999993, 0.12309246759999992, 0.12674730609999993, 0.13041021319999996, 0.13423827139999994, 0.13781754109999997, 0.14135105369999995, 0.14489591719999995, 0.14853381759999992, 0.15204895339999996, 0.15563449819999994, 0.15905611679999992, 0.16257679599999997, 0.16606385169999993, 0.16937597169999993, 0.17271936779999994, 0.17642475879999994, 0.17995257059999997, 0.18326236579999988]
htime[8] =  [0.0, 0.11103421843000001, 0.5853794258, 0.81972441014, 1.0464666998099998, 1.21757395467, 1.4038832440899998, 1.47672072131, 1.5900593924200002, 1.6422864031199997, 1.73206605838, 1.75583158511, 1.8208529251499999, 1.84855520552, 1.8809791022400004, 1.9030323143600003, 1.9203130609300003, 1.93656460541, 1.9577752980000005, 1.9735433097400006, 1.98770302508, 2.0001399607100008, 2.01012871112, 2.0235958251000006, 2.0335433947299997, 2.04287672375, 2.0510144038, 2.0592533525300003, 2.06731390768, 2.0748593239300006, 2.0822717408799996, 2.0895362174099996, 2.0964658275200003, 2.1032270034000002, 2.10978770199, 2.11632217907, 2.1227223901100003, 2.1290894347700005, 2.13543676359, 2.1416291127, 2.1477335052100006, 2.1537953716900002, 2.15982487136, 2.1658005686700004, 2.1716486132300004, 2.17750955692, 2.1832712175, 2.18902307992, 2.1947174773700002, 2.2003500363199997, 2.2059486076300003, 2.2115396974199997, 2.2170773926600003, 2.22260025592, 2.22810382355, 2.2336229402299996, 2.23909679451, 2.2445727105300004, 2.2499588539000004, 2.2553632845700005, 2.26070179204, 2.2660667789900004, 2.2713191935200006]
htime[(8,10)] =  [0.0, 0.009381477299999995, 0.04267478169999999, 0.09546088239999996, 0.1266186862, 0.15463390449999997, 0.2091431161, 0.22403700799999998, 0.2588148438, 0.2719431017, 0.33275747489999996, 0.34987704430000005, 0.38456569609999985, 0.39245802279999986, 0.4048618902999997, 0.4175153487, 0.4363783026, 0.4467701006999999, 0.4620292972999999, 0.47178056789999956, 0.48125875920000005, 0.4963424806, 0.5070543881999999, 0.5140801121999999, 0.5200364408, 0.5294222917000001, 0.5379513015000001, 0.5480017419000002, 0.5660571794000001, 0.5726048696000001, 0.5786382428000002, 0.5851709256000002, 0.5981388967000002, 0.6045918000000002, 0.6110733229000003, 0.6176097790000002, 0.6234548971000005, 0.6291830562000005, 0.6346992210000005, 0.6411156500000006, 0.6472378065000005, 0.6533132339000005, 0.6601057844000005, 0.6657933413000005, 0.6714103405000005, 0.6767703164000005, 0.6825849064000004, 0.6881289514000004, 0.6940836357000003, 0.6993774437000002, 0.7047783913000002, 0.7102863584000002, 0.7157694982000002, 0.7212509011000002, 0.7267766833000004, 0.7322454687000005, 0.7376614518000004, 0.7430716374000004, 0.7482101727000005, 0.7532911839000004, 0.7583925669000002, 0.7634622017000001, 0.7685106447000003, 0.7734214190000003]
htime[(8,25)] =  [0.0, 0.01661026249999999, 0.08773088700000001, 0.1402771365, 0.19837138875, 0.22940374999999996, 0.2796955514999999, 0.31143526125000004, 0.33777676275, 0.3726840455, 0.40593528200000006, 0.4419507905000001, 0.48311932474999997, 0.5034744390000002, 0.5177169272499998, 0.5371812685, 0.55506973775, 0.5762209047500002, 0.5930900052500002, 0.61584229725, 0.6265003555000003, 0.6422676752500003, 0.6508927807500003, 0.6863818715000001, 0.6933738392500002, 0.7000544575000001, 0.7060529885000001, 0.7125847792500002, 0.72137373275, 0.7307354667500002, 0.7370106115000004, 0.7441654620000004, 0.7505684255000004, 0.7569289080000003, 0.7632890477500004, 0.7693268822500003, 0.7760242085000003, 0.7818490715000003, 0.7888276557500002, 0.7962529252500002, 0.8022591190000004, 0.8078589422500003, 0.8137131887500002, 0.8193494365000001, 0.8250663985000002, 0.8310344715000002, 0.8366888660000003, 0.8422660682500003, 0.8477839850000002, 0.8533254010000002, 0.8586656012500002, 0.8640106532500003, 0.8693350870000003, 0.8746337440000002, 0.8801275782500002, 0.88535722175, 0.891465592, 0.89732078825, 0.9030164485, 0.9085978492499998, 0.9141416699999999, 0.9194520447500001, 0.9247885745000001, 0.9298613092500002]
htime[(8,50)] =  [0.0, 0.051650238, 0.172744145, 0.23415603350000003, 0.307160388, 0.3551074455, 0.40623551499999994, 0.432678856, 0.5121418799999999, 0.5839901940000001, 0.625513158, 0.6359433255, 0.6746697220000002, 0.7046724265000002, 0.7563933380000001, 0.790941525, 0.8571277825000001, 0.8669549599999999, 0.8991633440000002, 0.9190934585, 0.9555078365, 0.9645213635000001, 0.972965072, 0.979870554, 0.9905608, 0.9989858615000001, 1.0052156330000002, 1.0116908695000004, 1.0177908925000003, 1.0253343290000003, 1.0313373735000004, 1.0378604010000005, 1.0444664380000004, 1.0518145800000003, 1.0591388500000003, 1.0661214155000003, 1.0721049745000002, 1.0797404030000002, 1.0858509985000002, 1.0919083000000005, 1.0978652925000005, 1.1039334225000006, 1.1097220515000006, 1.1153730345000004, 1.1216966470000003, 1.1274824235000005, 1.1336129715000003, 1.1394591120000004, 1.1453864565000003, 1.1515289435000002, 1.1572165945000004, 1.163037181, 1.1684011395000002, 1.173827792, 1.1793457530000002, 1.1847570360000002, 1.190170616, 1.1956037190000002, 1.2010497975000005, 1.2062754200000003, 1.211498331, 1.2167292895000001, 1.2217697420000004, 1.2266812110000003]
htime[(8,75)] =  [0.0, 0.140954574, 0.30919392025000003, 0.44385780925, 0.6524070235, 0.7131833417499998, 0.86260764025, 0.9704618037500001, 1.426002335, 1.4554396027499998, 1.65451985875, 1.6683874090000002, 1.75350799, 1.7675751000000002, 1.7818286612500003, 1.7920820092500005, 1.7994668405000005, 1.8072514517500005, 1.8161190602500004, 1.8261248812500002, 1.83686665475, 1.8530321825, 1.8673902720000002, 1.87972887, 1.897373087, 1.90461621125, 1.9218446489999998, 1.9288947904999998, 1.93501349, 1.9431122815, 1.9511026065, 1.9598926107499997, 1.9671605007499995, 1.978213549999999, 1.9845029827499987, 1.9915128459999984, 1.9992609287499985, 2.0061182117499987, 2.0124089899999986, 2.0191026089999986, 2.0250964879999986, 2.0314724177499985, 2.0373264869999987, 2.045511211000001, 2.0519765492500013, 2.057859075250001, 2.0643200637500008, 2.070672531000001, 2.0764966337500015, 2.0820559345000014, 2.0874522055000018, 2.0929970300000016, 2.0985084127500016, 2.104052524000002, 2.109481310000002, 2.114932586750002, 2.1203383507500018, 2.1257611252500017, 2.1311691505000017, 2.1365161895000018, 2.141812142000002, 2.1468414927500024, 2.151855482250002, 2.156775559250002]
htime[(8,90)] =  [0.0, 0.31492734730000027, 1.1013261339000007, 2.2596223147000054, 2.876152912200004, 3.3380960442000047, 3.8662299708000027, 3.908937356000003, 3.955578274500003, 3.976583061400003, 4.0470447114000025, 4.076531034300002, 4.093815487800003, 4.1833294213000025, 4.197219748000002, 4.224749087800002, 4.232554363800002, 4.249637801800002, 4.257820534800002, 4.265376519600002, 4.282934622500001, 4.290072653100001, 4.299226449900001, 4.314001825000002, 4.328855900400001, 4.337640005800002, 4.343738169200002, 4.353532226900001, 4.360384967900001, 4.3664281455000005, 4.3722436753, 4.383135385599999, 4.389721510899999, 4.395152625800001, 4.4017134236, 4.4087152114, 4.414833156299999, 4.4205520943, 4.426137273699999, 4.434977279899999, 4.441188072199999, 4.44981594, 4.4556533703, 4.4616458131, 4.467189489499999, 4.472736723199999, 4.478242060799999, 4.483718602599999, 4.489219119799999, 4.494749068899998, 4.500520005999999, 4.5060334923999985, 4.511346053699999, 4.516804573899999, 4.522234663399998, 4.527690869899999, 4.533112162899998, 4.538513407399998, 4.543870137699999, 4.548987509099999, 4.554074017999998, 4.559104692699999, 4.564116984399999, 4.5691177149]
htime[10] =  [0.0, 5.2908663811, 9.60588495376, 15.64333271877, 22.44049813948, 28.41352620345, 30.485487775810007, 34.9376496039, 37.35957368785001, 41.14554965059, 42.45852302609, 46.14738740518, 48.231393207740005, 51.11390663766001, 53.14722135434, 56.22988057555, 58.98420912843, 60.494102732280005, 62.60517196202999, 62.88326849303, 63.31734082498001, 63.99951879216, 65.10968049815001, 65.96880024292001, 67.60860489539, 68.9554313691, 69.30790207449, 69.43517422258, 69.67390547801001, 69.80931030884, 70.11892891436, 70.19489346248, 70.29245359555001, 70.40177103782001, 70.53390506308001, 70.66623512525001, 70.75748936848, 70.88534832700002, 70.96174778549002, 70.99924609298, 71.04942236292, 71.08584629103001, 71.12305849745003, 71.14827666899001, 71.17458068016, 71.23186564714003, 71.25838849956, 71.29365751309001, 71.31098904435001, 71.33440623897, 71.36076861666001, 71.37795926473001, 71.39540434483, 71.40824402259, 71.42131879575, 71.43618729316, 71.44830622127, 71.4611511314, 71.47157684604001, 71.48310732066, 71.49337333887001, 71.50391584226001, 71.51483230508, 71.52473761779, 71.53590537193001, 71.54554179941002, 71.55522584072001, 71.56469626241001, 71.57386857749, 71.5828904301, 71.59200939169, 71.60106043997001, 71.61004376426001, 71.61890200806002, 71.62771691989002, 71.63635518431002, 71.64484949822001, 71.65337516279001, 71.66182472908, 71.67027460873001, 71.67865032030001, 71.68707412549001, 71.69550813270001, 71.70385699473002, 71.71211886442002, 71.72035086442001, 71.72850139545001, 71.73662741483001, 71.74470695255002, 71.75274906552002, 71.76079877131002, 71.76883520859, 71.77683437745002, 71.78470236053, 71.79254115951001, 71.80029648077, 71.80795467604001, 71.81559607486001, 71.82312212495003]
htime[(10,10)] =  [0.0, 0.47020083560000003, 1.4603294023, 2.561260169199999, 3.6972328672000003, 4.127370729, 5.7329025821999995, 6.4229385613000005, 6.615096526599999, 7.465338755199998, 7.710703747399998, 8.9703292405, 9.082023769900003, 9.7135176244, 9.767086697399996, 10.086173500600001, 10.5165130069, 10.574707220599993, 10.933461708399998, 11.057494251999998, 11.3242266702, 11.6305865182, 11.9188484479, 12.002971964, 12.625355813199999, 12.784141853399998, 13.086593485700002, 13.180790949800002, 13.212098345000001, 13.240677552600003, 13.354751033100003, 13.420473180400002, 13.435064499500001, 13.4601240216, 13.4710056249, 14.286278043899992, 14.298328160699992, 14.570305546999993, 14.700868611599992, 14.743676333799991, 14.792994348599992, 14.80944583069999, 14.820795167199991, 14.842797627799994, 14.858610237999994, 14.867572897399993, 14.881411601799993, 14.932355585299993, 14.945606247899992, 14.95647503379999, 14.965453242599992, 14.977021730999992, 14.990653133199991, 14.99913786399999, 15.011812613599991, 15.027429723099992, 15.03789123469999, 15.04742867839999, 15.06401704379999, 15.09706424249999, 15.106695104699988, 15.115925871599988, 15.124642897599989, 15.134874615899989, 15.144269172499989, 15.15289792879999, 15.162541314199988, 15.171851769999986, 15.180600272499987, 15.189003487099988, 15.198103693799988, 15.206699678299987, 15.215729457699986, 15.224029564099986, 15.233252994199987, 15.242044347399988, 15.251383276599988, 15.259667982099986, 15.268479603999987, 15.276910578499987, 15.285307335899986, 15.293243655299987, 15.301728231199986, 15.310043580099986, 15.318008834999986, 15.326290920299986, 15.334455330899987, 15.342602920099985, 15.350761780099987, 15.359350949999985, 15.367469462299985, 15.375566521499985, 15.383390622499984, 15.391044628299985, 15.398750048699984, 15.406772473199988, 15.414348002499988, 15.421854300099989, 15.429363966399988, 15.436770988899989]
htime[(10,25)] =  [0.0, 0.7680187817499999, 2.2888839485, 3.6785031824999996, 5.4340361692500005, 7.2232040369999995, 7.8576215675, 8.607532903, 9.34307983175, 10.543500270500003, 10.591050074500004, 11.316842298500001, 11.833379718499998, 12.588488407000003, 13.696832501749993, 15.073162022, 17.1343164865, 17.18173356225, 19.29138917525, 19.59317189050001, 19.605781453500008, 19.867208982749993, 19.903209998749993, 19.94691687049999, 23.8309989555, 25.468464815249998, 25.5364697885, 25.58272360625, 25.659851541749997, 25.689630893249998, 25.715669298749994, 25.81909172175, 25.865939013999995, 25.972671861749994, 26.066845774249995, 26.187411042500017, 26.208437359000015, 26.48149425325001, 26.49367330625001, 26.51006589100001, 26.55973268325001, 26.580728190750012, 26.621843321250015, 26.646151897750016, 26.663641685000016, 26.679414314250018, 26.69097829650002, 26.700551411250018, 26.743461959500003, 26.7663569505, 26.784280197, 26.793032352, 26.80192184275, 26.811217901000003, 26.829150966500006, 26.84028441675001, 26.85019597775001, 26.859857044500007, 26.86831404100001, 26.87872773400001, 26.887150912000006, 26.895624573250007, 26.906984186250007, 26.916915854750005, 26.929029065500007, 26.93847709375001, 26.947419975500004, 26.955817542000005, 26.96595965325001, 26.974542625750008, 26.98385636425001, 26.99248081825001, 27.00051911675001, 27.01096366500001, 27.019434250250008, 27.02790346425001, 27.03665330125001, 27.044878612750008, 27.05371920400001, 27.062299103750007, 27.07066707125001, 27.07889825225001, 27.08747528250001, 27.09582327350001, 27.104074400500007, 27.11225864725001, 27.12045912650001, 27.12839133875001, 27.13664527500001, 27.14471308925001, 27.15276241850001, 27.16076450100001, 27.168797476750015, 27.176415656500012, 27.184021700250014, 27.191564741750014, 27.199063057750017, 27.206934791500014, 27.214426526750014, 27.221836555500012]
htime[(10,50)] =  [0.0, 2.029379405, 4.122276434, 6.8254880055000005, 8.2519129965, 9.9392689735, 11.038735620999999, 14.500560695, 16.393118813, 19.319865055500003, 20.650893874, 26.377782032, 29.526537456499995, 33.31047523349999, 38.462013633, 40.854126833500004, 42.1033048755, 43.678991151999995, 45.981114332000004, 46.08919717500001, 48.20257720000001, 49.650188004, 49.952122629499996, 50.17325655299999, 50.998118631999986, 53.94300514449998, 55.506970199, 55.6001206405, 55.6149430225, 55.74895699100001, 59.75181176050002, 59.84373687100002, 59.89193997100001, 59.96022136800002, 60.78897471600001, 60.81178726650002, 61.01560676750002, 61.03767728200002, 61.198547648000016, 61.25041796400002, 61.36681877450002, 61.397724963000016, 61.43754754200002, 61.45215548700003, 61.46640260700002, 61.48403854150003, 61.52487745800003, 61.54121707100003, 61.55130406450002, 61.56430567100003, 61.576408765000025, 61.58835799250002, 61.70163854050003, 61.71067194650003, 61.72168882300002, 61.732442237000015, 61.74139603600002, 61.75381871950002, 61.76572079700002, 61.77528074450002, 61.78621889500002, 61.796544287500026, 61.80529920150003, 61.817762976000026, 61.833926666000025, 61.85474403700003, 61.86419934850002, 61.87356109700002, 61.882796697000025, 61.89154743850003, 61.900425241500024, 61.90961005300002, 61.919135861000015, 61.92735988200002, 61.93553766150002, 61.94473588300002, 61.95319606250002, 61.961920505500025, 61.970371419500026, 61.97896769650002, 61.98732414100003, 61.99591673600003, 62.00417865650003, 62.01241690300003, 62.02046902850003, 62.02875147550003, 62.03704995650003, 62.04506133600003, 62.05308022350003, 62.06124721450004, 62.06924576500003, 62.07736168200003, 62.085189549000035, 62.093357211500035, 62.101452546500035, 62.10905417300003, 62.11682767900004, 62.12434234800003, 62.13214628800003, 62.13956193750002]
htime[(10,75)] =  [0.0, 5.63563930075, 7.4401549547500005, 11.2680254875, 16.072549726250003, 36.83775125525, 44.61066105374998, 51.4804206475, 64.67232288299999, 66.49288855975001, 66.5884793725, 69.01357015275, 69.48983390550003, 73.09571184399998, 74.52598173575, 79.67628620349996, 80.16389647874996, 84.22940133399999, 89.06230048025, 91.987294067, 92.14887671075, 92.34341569124999, 94.69083841575, 94.81061198499998, 94.84394673299998, 94.85333392899999, 94.87178127474998, 95.21724897524997, 95.76126474274997, 95.79727114474998, 95.85843299799998, 96.01812237649999, 96.10476856074997, 96.16377120099997, 96.97424724149997, 97.03078381524998, 97.04585056999997, 97.05500306699994, 97.06841883424995, 97.09867160224995, 97.10986638299995, 97.13082788599995, 97.14386662424994, 97.15580173074994, 97.16852476199993, 97.19602745599994, 97.20979010249992, 97.22256688999992, 97.23351785349993, 97.39499737299992, 97.42935184449993, 97.44299121474992, 97.45342423099991, 97.47221872574991, 97.48130132249992, 97.49095185949992, 97.50185388924992, 97.51815074024992, 97.52789813949991, 97.5414538894999, 97.5520708737499, 97.56411067074991, 97.57670899174991, 97.58704957549992, 97.60336124274991, 97.61261644774993, 97.62291461624994, 97.63243867699995, 97.64163812149995, 97.65198329149996, 97.66157532449996, 97.67093946999996, 97.67908248099998, 97.68771707674998, 97.69618579549997, 97.70449182574997, 97.71280316774997, 97.72114343199996, 97.72952548924997, 97.73829828474994, 97.74665154799993, 97.75505860049994, 97.76336238474993, 97.77155481299994, 97.77969603974994, 97.78791475574994, 97.79646242599995, 97.80478700499994, 97.81292431099995, 97.82107355124994, 97.82908078099993, 97.83692620649992, 97.84492471374992, 97.85294512574993, 97.86066663224993, 97.86854220124994, 97.87630234249995, 97.88412000024995, 97.89179041799996, 97.89906918874996]
htime[(10,90)] =  [0.0, 10.669298219200002, 17.52526290260005, 46.490169782900054, 62.7970397442, 65.3106612593, 67.9939234656, 71.67332676060003, 75.94993733540004, 102.26315141550009, 105.02405472290008, 105.03939032710007, 112.30445723, 119.46208085720006, 121.43386701750003, 127.58465006720004, 131.2594213794001, 131.3214007639001, 131.34095671350008, 131.44219484790008, 131.71468589180006, 134.42269417629998, 134.4776569553, 136.7440812047001, 136.83116313150015, 140.38866843750003, 140.3971984366, 140.7419316872, 143.48474865710003, 143.5095527203, 143.5217253741, 143.5385809631, 143.5546967831, 143.5702860166, 143.57952082609998, 146.18195699070003, 146.29513722430002, 146.34494924750004, 146.35687931570007, 146.36920911890007, 146.41183361280008, 146.4470952537001, 146.4556228819001, 146.4933335135001, 146.50347300090007, 146.51167567040008, 146.54544080400007, 147.19053792670005, 147.20138859010004, 147.21414567080006, 147.23089984840007, 147.2429842426001, 147.2520788495001, 147.2674506313001, 147.2761991546001, 147.2847247322001, 147.29652589070008, 147.3114561265001, 147.32165498920008, 147.33885445000007, 147.34815775220008, 147.3569668289001, 147.36705653190012, 147.37848405560013, 147.38812742990015, 147.40069441740013, 147.40970905160015, 147.41813462510015, 147.42674809980014, 147.43647794800017, 147.44568481300018, 147.45440958060018, 147.4636012248002, 147.47227273660022, 147.4818621148002, 147.4905373075002, 147.49896963500018, 147.5078889577002, 147.51652494840022, 147.5256081426002, 147.5338939088002, 147.5422262234002, 147.55045968910022, 147.55868129640018, 147.5670378124002, 147.57557417320015, 147.5837606696002, 147.5918858345002, 147.5999764288002, 147.60775118090018, 147.6157664645002, 147.62378379400022, 147.6318195184002, 147.63985026530017, 147.64749301210017, 147.65521354350014, 147.66289594730014, 147.67084068660017, 147.67832995120017, 147.68564070040017]

hstep={}
hstep[4] =  [3.33, 4.62, 5.02, 5.07, 4.82, 4.99, 4.18, 4.27, 3.78, 3.55, 3.13, 2.67, 1.91, 1.46, 1.0]
hstep[(4,10)] =  [1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
hstep[(4,25)] =  [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0]
hstep[(4,50)] =  [3.0, 4.0, 4.0, 4.0, 4.0, 5.0, 4.0, 4.0, 3.5, 4.0, 3.0, 3.0, 2.0, 1.0, 1.0]
hstep[(4,75)] =  [4.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 5.0, 4.0, 4.0, 3.0, 2.0, 1.0]
hstep[(4,90)] =  [5.0, 8.0, 11.0, 11.0, 10.0, 10.0, 8.0, 8.0, 6.1000000000000085, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0]
hstep[6] =  [5.5, 5.13, 6.73, 6.8, 8.95, 8.88, 8.48, 8.57, 8.79, 7.59, 8.03, 8.09, 7.43, 7.01, 8.29, 8.57, 7.47, 7.23, 6.83, 6.97, 6.52, 6.76, 6.17, 5.75, 5.5, 5.48, 4.54, 4.15, 3.62, 3.29, 3.03, 2.68, 1.97, 1.5, 1.0]
hstep[(6,10)] =  [3.0, 2.9000000000000004, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 2.0, 2.0, 1.9000000000000004, 2.0, 2.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
hstep[(6,25)] =  [4.0, 3.0, 4.0, 3.0, 4.0, 4.0, 4.0, 3.0, 4.0, 3.0, 4.0, 4.0, 3.0, 3.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 3.0, 3.0, 3.0, 2.0, 3.0, 3.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0]
hstep[(6,50)] =  [5.0, 4.0, 6.0, 5.0, 7.0, 7.0, 7.0, 6.0, 7.0, 5.0, 6.0, 7.0, 5.0, 5.5, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 5.5, 5.0, 5.0, 6.0, 4.0, 4.0, 3.0, 3.0, 3.0, 3.0, 2.0, 1.5, 1.0]
hstep[(6,75)] =  [7.0, 6.0, 9.0, 8.0, 12.0, 11.0, 11.25, 11.25, 11.25, 9.0, 10.0, 11.0, 10.25, 9.0, 12.25, 12.0, 10.25, 10.0, 9.25, 9.0, 9.0, 10.0, 9.0, 8.0, 8.0, 8.0, 7.0, 6.0, 5.0, 5.0, 4.0, 4.0, 3.0, 2.0, 1.0]
hstep[(6,90)] =  [9.0, 9.0, 13.100000000000009, 13.0, 18.0, 19.10000000000001, 17.10000000000001, 19.0, 18.10000000000001, 17.10000000000001, 21.0, 15.0, 15.100000000000009, 14.0, 18.0, 17.10000000000001, 16.10000000000001, 15.0, 13.100000000000009, 14.100000000000009, 13.100000000000009, 12.100000000000009, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0]
hstep[8] =  [7.1, 6.7, 6.84, 6.65, 8.44, 7.83, 10.21, 10.98, 11.5, 13.1, 12.15, 11.66, 12.49, 11.17, 12.03, 12.45, 9.25, 11.73, 14.79, 13.57, 12.22, 11.81, 13.44, 13.41, 14.46, 13.11, 12.55, 11.0, 11.19, 11.75, 11.55, 10.37, 12.05, 10.9, 11.63, 11.06, 10.32, 11.59, 10.41, 10.69, 9.01, 8.69, 9.37, 8.76, 7.62, 8.33, 8.77, 6.99, 6.99, 6.51, 6.23, 5.43, 5.38, 5.32, 5.14, 3.9, 3.79, 3.58, 3.28, 2.53, 1.86, 1.59, 1.0]
hstep[(8,10)] =  [3.9000000000000004, 3.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 2.0, 3.0, 2.0, 2.9000000000000004, 3.0, 3.0, 3.9000000000000004, 2.0, 2.0, 2.9000000000000004, 2.0, 3.0, 2.0, 3.0, 2.9000000000000004, 4.0, 2.0, 2.0, 3.0, 3.0, 2.0, 3.0, 2.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.9000000000000004, 2.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.9000000000000004, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
hstep[(8,25)] =  [5.0, 4.0, 4.0, 3.0, 5.0, 4.0, 5.0, 5.0, 4.75, 5.0, 5.0, 4.0, 5.0, 5.0, 4.0, 5.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0, 4.0, 5.75, 5.0, 5.0, 5.0, 4.0, 5.0, 5.0, 5.0, 4.0, 5.0, 5.0, 5.0, 5.0, 4.0, 5.0, 4.0, 5.0, 4.0, 4.0, 4.0, 3.0, 3.0, 4.0, 4.0, 3.0, 3.75, 3.0, 3.0, 2.75, 3.0, 3.0, 3.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0]
hstep[(8,50)] =  [7.0, 6.0, 6.0, 5.0, 7.0, 6.0, 7.0, 7.0, 9.0, 9.0, 8.0, 7.0, 8.0, 8.0, 8.0, 9.0, 6.0, 8.5, 9.0, 8.5, 8.0, 9.0, 9.5, 9.0, 9.5, 8.5, 9.0, 7.0, 9.5, 8.0, 9.0, 8.0, 10.0, 9.0, 10.0, 9.5, 8.0, 10.0, 8.0, 9.0, 8.0, 7.0, 8.0, 6.5, 6.0, 7.0, 9.0, 6.0, 6.0, 6.0, 6.0, 5.0, 5.0, 5.0, 5.0, 4.0, 3.5, 3.0, 3.0, 3.0, 2.0, 2.0, 1.0]
hstep[(8,75)] =  [9.25, 7.0, 8.0, 8.0, 9.25, 8.25, 12.0, 14.0, 14.0, 17.0, 16.0, 14.0, 15.25, 15.25, 17.25, 17.25, 11.25, 14.0, 23.25, 20.0, 15.25, 15.0, 19.5, 20.0, 23.25, 20.0, 19.0, 16.25, 16.25, 17.0, 16.0, 15.0, 18.0, 16.0, 16.25, 16.25, 15.0, 18.0, 16.0, 16.0, 13.0, 14.0, 15.0, 14.25, 12.0, 13.0, 13.0, 11.0, 10.25, 10.0, 9.0, 8.0, 8.0, 8.0, 7.25, 5.0, 5.0, 5.0, 5.0, 3.0, 2.0, 2.0, 1.0]
hstep[(8,90)] =  [11.0, 15.0, 12.0, 12.100000000000009, 18.10000000000001, 12.0, 19.0, 24.0, 24.0, 25.10000000000001, 25.300000000000026, 27.200000000000017, 27.300000000000026, 23.10000000000001, 27.200000000000017, 24.200000000000017, 19.300000000000026, 27.200000000000017, 38.0, 33.300000000000026, 28.10000000000001, 26.200000000000017, 34.0, 31.10000000000001, 36.0, 28.200000000000017, 28.10000000000001, 24.10000000000001, 23.0, 27.0, 25.10000000000001, 21.200000000000017, 26.0, 21.400000000000034, 26.0, 23.0, 23.10000000000001, 23.10000000000001, 23.0, 22.0, 18.0, 19.0, 19.0, 18.0, 17.0, 17.0, 16.0, 14.0, 14.0, 13.0, 12.0, 11.0, 10.100000000000009, 9.0, 9.0, 7.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0]
hstep[10] =  [9.19, 7.38, 8.33, 8.62, 9.74, 7.86, 10.59, 10.3, 10.76, 11.01, 15.48, 12.66, 13.05, 15.34, 16.9, 17.71, 13.58, 14.57, 14.63, 14.0, 17.24, 17.71, 17.56, 15.64, 16.55, 17.85, 16.42, 17.86, 14.12, 16.38, 14.84, 17.1, 17.36, 14.83, 14.37, 16.41, 17.36, 19.79, 17.93, 16.93, 17.4, 15.88, 18.14, 16.51, 18.31, 16.39, 15.3, 15.83, 14.64, 17.55, 17.33, 15.16, 18.14, 14.8, 14.51, 14.4, 15.52, 14.23, 15.3, 12.34, 13.79, 15.41, 13.61, 14.51, 12.62, 14.45, 12.7, 13.77, 13.57, 12.29, 12.26, 12.13, 11.34, 12.12, 11.26, 10.72, 9.91, 10.9, 9.51, 9.08, 8.73, 8.7, 7.6, 7.63, 7.1, 7.41, 5.84, 5.9, 5.5, 5.15, 5.06, 4.52, 3.99, 3.42, 2.96, 2.34, 2.01, 1.51, 1.0]
hstep[(10,10)] =  [4.9, 3.0, 3.0, 3.0, 4.0, 3.0, 4.0, 3.0, 3.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 2.9000000000000004, 3.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.9, 3.0, 3.0, 3.9000000000000004, 3.0, 2.0, 2.9000000000000004, 3.9000000000000004, 3.9000000000000004, 2.9000000000000004, 3.0, 4.0, 4.0, 3.0, 3.0, 3.0, 4.0, 3.0, 3.0, 2.9000000000000004, 3.0, 4.0, 2.0, 2.0, 3.0, 3.9000000000000004, 3.0, 2.9000000000000004, 2.9000000000000004, 4.0, 3.0, 3.0, 3.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 3.0, 3.0, 3.0, 2.0, 2.0, 3.0, 2.0, 4.0, 3.9000000000000004, 2.0, 3.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.9000000000000004, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
hstep[(10,25)] =  [7.0, 4.75, 5.0, 4.75, 5.75, 5.0, 6.0, 5.0, 6.0, 5.0, 6.0, 5.0, 5.75, 5.0, 6.0, 7.0, 6.0, 6.0, 5.0, 5.0, 6.75, 6.0, 6.0, 5.0, 6.75, 7.0, 5.75, 5.75, 6.0, 5.0, 5.0, 6.0, 6.0, 5.0, 5.0, 5.0, 5.75, 5.0, 6.0, 5.75, 6.0, 6.0, 5.75, 5.0, 5.0, 5.75, 5.0, 5.0, 5.0, 6.0, 6.0, 5.0, 7.0, 5.0, 4.0, 5.0, 5.0, 4.0, 5.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 5.0, 5.0, 5.0, 4.75, 4.0, 5.0, 5.0, 5.0, 5.0, 4.75, 4.0, 4.0, 3.75, 3.0, 3.0, 3.0, 3.0, 2.75, 3.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0]
hstep[(10,50)] =  [9.0, 6.5, 7.0, 7.0, 8.0, 8.0, 7.5, 8.0, 8.0, 9.0, 10.0, 8.0, 8.0, 9.5, 12.0, 11.0, 10.0, 9.0, 8.0, 8.5, 12.5, 11.5, 12.0, 9.0, 10.5, 11.0, 11.0, 12.0, 9.0, 10.0, 8.5, 11.0, 10.5, 9.0, 9.0, 9.5, 11.0, 11.0, 11.5, 13.0, 11.0, 11.5, 10.5, 11.0, 14.0, 10.5, 12.0, 11.5, 11.0, 12.5, 12.0, 10.5, 14.0, 10.0, 10.0, 10.0, 12.0, 11.0, 12.5, 8.0, 12.0, 12.0, 11.0, 12.0, 9.5, 11.5, 10.0, 11.0, 11.5, 10.0, 10.0, 10.0, 10.0, 11.0, 10.0, 9.0, 9.0, 10.0, 9.0, 8.0, 7.5, 8.0, 7.0, 7.0, 6.0, 7.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 4.0, 3.0, 3.0, 2.0, 2.0, 2.0, 1.0]
hstep[(10,75)] =  [11.0, 9.0, 10.0, 9.25, 11.0, 10.0, 12.0, 11.0, 13.0, 13.0, 21.0, 14.0, 16.0, 18.25, 23.0, 25.0, 15.5, 17.25, 15.0, 16.0, 23.25, 22.0, 26.25, 20.25, 20.25, 20.0, 23.25, 26.5, 18.25, 19.25, 18.25, 21.25, 25.0, 21.25, 21.25, 22.5, 22.25, 28.5, 22.5, 20.25, 22.25, 21.25, 29.25, 24.25, 25.0, 24.0, 21.25, 25.0, 21.25, 25.25, 29.0, 21.25, 29.0, 21.25, 21.75, 20.0, 23.0, 22.25, 24.25, 18.25, 21.0, 26.25, 19.0, 22.0, 16.25, 23.0, 19.0, 22.0, 21.0, 17.0, 18.25, 17.0, 17.0, 20.0, 17.0, 17.0, 16.0, 15.5, 15.0, 14.0, 12.25, 13.0, 11.0, 11.0, 10.25, 11.0, 9.0, 9.0, 8.0, 8.0, 7.0, 7.0, 6.0, 5.0, 4.0, 3.0, 3.0, 2.0, 1.0]
hstep[(10,90)] =  [14.0, 11.0, 11.0, 16.0, 15.200000000000017, 13.0, 22.0, 21.10000000000001, 20.200000000000017, 19.300000000000026, 33.20000000000002, 26.60000000000005, 24.10000000000001, 31.0, 34.70000000000006, 42.300000000000026, 30.10000000000001, 32.400000000000034, 37.70000000000006, 30.300000000000026, 36.20000000000002, 49.20000000000002, 39.10000000000001, 34.0, 36.10000000000001, 39.20000000000002, 37.20000000000002, 41.20000000000002, 26.900000000000077, 49.20000000000002, 39.20000000000002, 47.300000000000026, 41.20000000000002, 32.20000000000002, 31.300000000000026, 43.0, 46.0, 52.10000000000001, 48.20000000000002, 42.10000000000001, 46.0, 36.20000000000002, 44.0, 37.70000000000006, 48.10000000000001, 42.10000000000001, 38.20000000000002, 35.10000000000001, 33.10000000000001, 43.0, 39.300000000000026, 38.0, 43.0, 33.20000000000002, 36.300000000000026, 36.0, 35.0, 31.10000000000001, 36.10000000000001, 31.10000000000001, 30.0, 34.10000000000001, 32.10000000000001, 30.0, 28.10000000000001, 31.0, 30.0, 29.10000000000001, 26.10000000000001, 25.10000000000001, 26.10000000000001, 24.0, 25.0, 23.0, 22.10000000000001, 22.10000000000001, 19.10000000000001, 20.0, 19.0, 17.0, 17.0, 16.0, 15.0, 14.0, 14.0, 13.100000000000009, 11.0, 11.0, 10.0, 9.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0]

check = True

def display_plot():
    root = Tk()
    root.title("Statistics Viewer")
    
    img = Image.open("stats.png")
    photo = ImageTk.PhotoImage(img)
    label = Label(root, image=photo)
    label.image = photo  # Keep a reference!
    label.pack()
    
    def update_image():
        global check
        while True:
            if check:
                img = Image.open("stats.png")
                photo = ImageTk.PhotoImage(img)
                label.config(image=photo)
                label.image = photo
                check = False
            time.sleep(0.25)  # Refresh every second
            #print(len(snake))
    
    threading.Thread(target=update_image, daemon=True).start()
    
    root.mainloop()

threading.Thread(target=display_plot, daemon=True).start()
time.sleep(0.25)

#font_path = "Downloads/NotoColorEmoji-Regular.ttf"  # Replace with the path to your font
# Initialize pygame
pygame.init()
# Set up display

image = pygame.image.load("stats.png")
iw,ih = image.get_size()

n, m = 4, 4
width, height = 640, 480
width, height = 2000, 2000
width, height = 1046, 1046; n, m = 4, 4
cell_size = width/n
screen = pygame.display.set_mode((width, height), pygame.RESIZABLE)
pygame.display.set_caption('Snakes - Logic is Everywhere')
os.environ["SDL_VIDEO_WINDOW_POS"] = "0,200"

# Colors
black = (0, 0, 0)
green = (0, 255, 0)
red = (255, 0, 0)

# Clock
clock = pygame.time.Clock()
fps = 10

# Snake and Food
snake = [[1, 1]]
direction = 'None'
food = (random.randrange(0, n) ,
        random.randrange(0, m) )
steps = []
stepstotal = 0
start_time = 0
end_time = 0
times = []
check = False

# Font
font = pygame.font.SysFont(None, 35)
stats_file = 'game_stats.json'

def load_stats():
    if os.path.exists(stats_file):
        with open(stats_file, 'r') as f:
            return json.load(f)
    return []

def save_stats(stats):
    with open(stats_file, 'w') as f:
        json.dump(stats, f)

def add_stats():
    stats = load_stats()
    stats.append({'n': n, 'm': m, 'l': len(snake), 's': stepstotal, 'ss': steps, 't': sum(times), 'tt': times})
    save_stats(stats)

def calculate_percentage(v, x):
    v_sorted = sorted(v)
    position = 0
    l=0
    for value in v_sorted:
        if math.isnan(value):
            continue
        if x >= value:
            position += 1
        l +=1
    if l>0:
        return (position / len(v)) * 100
    else:
        return 0

def visualize_stats( save = False):
    global check
    stats = load_stats()

    # Filter stats for matching n and m
    tmax = sum(times) +1
    matching_stats = [stat for stat in stats if stat['n'] == n and stat['m'] == m]
    hss = np.array([stat['ss'] for stat in matching_stats])
    hl  = np.array([stat['l'] for stat in matching_stats])
    htt = np.array([stat['tt'] for stat in matching_stats])
    ht  = np.array([stat['t'] if stat['l']==n*m else tmax for stat in matching_stats])
    hs  = np.array([stat['s'] if stat['l']==n*m else stepstotal+1 for stat in matching_stats])
    hl  = np.array([stat['l'] for stat in matching_stats])
    

    hss = np.where(hss == 0.0, np.nan, hss)
    htt = np.where(htt == 0.0, np.nan, htt)
    ss = np.where(steps == 0, np.nan, steps)
    tt = np.where(times == 0.0, np.nan, times)
    #print(ss)
    #print(tt)


    plt.figure(figsize=(7.5, 10.5))
    plt.subplot(3, 1, 1)

    def calculate_percentiles(data, percentiles):
        data_no_zeros = np.where(data == 0, np.nan, data)
        return [np.nanpercentile(data_no_zeros, p, axis=0) for p in percentiles]
    
    if matching_stats:
        percentiles = [10.0, 25.0, 50.0, 75.0, 90.0]
        p10s, p25s, p50s, p75s, p90s = calculate_percentiles(hss, percentiles)
        p10t, p25t, p50t, p75t, p90t = calculate_percentiles(htt, percentiles)

        ps = calculate_percentage(hl,len(snake))
        if len(snake) < n*m:
            plt.suptitle(f'Statistik für Länge {len(snake)} (Top {int(100-ps-0.49)}%)', fontsize=16)
        else:
            ps = calculate_percentage(hs,sum(steps))
            pt = calculate_percentage(ht,sum(times))
            #print(ps, hs, sum(steps))
            #print(pt, ht, sum(times), times[:][-1])
            #pt = calculate_percentage(ht,sum(times))
            #plt.suptitle(f'Statistik für Zeit {int(sum(times))}s (Top {int(100-ps-0.49)}%, kürzeste {int(ps+0.49)}%, schnellste {int(pt+0.49)}%)', fontsize=24)
            #plt.suptitle(f'Statistik für Zeit {int(sum(times))}s, \nkürzeste {int(ps+0.49)}%, schnellste {int(pt+0.49)}%', fontsize=16)
            plt.suptitle(f'Statistik für Zeit {int(sum(times))}s', fontsize=16)

        # Plot ss
        plt.fill_between(range(len(p10s)), p10s, p90s, color='blue', alpha=0.1, label='10%-90% Perzentile')
        plt.fill_between(range(len(p25s)), p25s, p75s, color='blue', alpha=0.3, label='25%-75% Perzentile')
        plt.plot(p50s, color='blue', linestyle='--', label='Anzahl Schritte im Mittel')
        plt.plot(range(1,len(snake)),steps[1:(len(snake))], color='black', label='Aktuelles Spiel')
        plt.title('Anzahl Schritte pro Iteration')
        plt.grid()
        plt.legend()

        # Plot t
        plt.subplot(3, 1, 3)
        plt.title('Akkumulierte Zeit pro Iteration in s')
        plt.fill_between(range(len(p10t)), p10t, p90t, color='green', alpha=0.1, label='10%-90% Perzentile')
        plt.fill_between(range(len(p25t)), p25t, p75t, color='green', alpha=0.3, label='25%-75% Perzentile')
        plt.fill_between(range(len(htime[(n,10)])+1), [np.nan]+htime[(n,10)], [np.nan]+htime[(n,90)], color='orange', alpha=0.1, label='10%-90% Perzentile')
        plt.fill_between(range(len(htime[(n,25)])+1), [np.nan]+htime[(n,25)], [np.nan]+htime[(n,75)], color='orange', alpha=0.3, label='25%-75% Perzentile')
        plt.plot(p50t, color='green', linestyle='--', label='akkumulierte Zeit im Mittel')
        plt.plot([np.nan]+htime[(n,50)], color='orange', linestyle='--', label='Computer')
        plt.plot(range(0,len(snake)),times[0:(len(snake))], color='black', label='Aktuelles Spiel')
        plt.grid()
        plt.legend()


        # Plot t
        plt.subplot(3, 1, 2)
        plt.title('Anzahl Schritte Computer')
        plt.fill_between(range(len(hstep[(n,10)])+1), [np.nan]+hstep[(n,10)], [np.nan]+hstep[(n,90)], color='red', alpha=0.1, label='10%-90% Perzentile')
        plt.fill_between(range(len(hstep[(n,25)])+1), [np.nan]+hstep[(n,25)], [np.nan]+hstep[(n,75)], color='red', alpha=0.3, label='25%-75% Perzentile')

        plt.plot([np.nan]+hstep[(n,50)], color='red', linestyle='--', label='Anzahl Schritte im Mittel')
        plt.plot(range(1,len(snake)),steps[1:(len(snake))], color='black', label='Aktuelles Spiel')
        plt.grid()
        plt.legend()
        # Plot t

#        plt.subplot(1, 3, 4)
#        plt.title('Zeit Computer')
#        plt.fill_between(range(len(htime[(n,10)])+1), [np.nan]+htime[(n,10)], [np.nan]+htime[(n,90)], color='orange', alpha=0.1, label='10%-90% Perzentile')
#        plt.fill_between(range(len(htime[(n,25)])+1), [np.nan]+htime[(n,25)], [np.nan]+htime[(n,75)], color='orange', alpha=0.3, label='25%-75% Perzentile')
#        plt.plot([np.nan]+htime[(n,50)], color='orange', linestyle='--', label='akkumulierte Zeit im Mittel')
#        plt.plot(range(0,len(snake)),times[0:(len(snake))], color='black', label='Aktuelles Spiel')
#        plt.grid()
#        plt.legend()

        plt.tight_layout()
        plt.savefig("stats.png")
    if save:
        add_stats()
    plt.close()
    check = True



def load_svg(size):    
    # Convert SVG to PNG and load it
    cairosvg.svg2png(url="eyes.svg", write_to=f"temp_eyes_{int(size)}.png", output_width=size, output_height=size)
    cairosvg.svg2png(url="apple.svg", write_to=f"temp_apple_{int(size)}.png", output_width=size, output_height=size)

def draw_svg(typ, position, size):
    x, y = position
    image = pygame.image.load("temp_"+typ+"_"+str(int(size))+".png")
    screen.blit(image, (x, y))

# Game over function
def game_over():
    end_time = datetime.now()
    duration = (end_time - start_time)
    visualize_stats(True)
    # screen.fill(black)
    # if len(snake) ==n*m:
    #     game_over_text = font.render(f'Won! L: {len(snake)} S: {(stepstotal)} T: {duration}s', True, green)
    # else:
    #     game_over_text = font.render(f'Game Over! L: {len(snake)} S: {(stepstotal)} T: {duration}s', True, red)
    # screen.blit(game_over_text, (width // 6, height // 2))
    # pygame.display.flip()
    # waiting_for_input = True
    # while waiting_for_input:
    #     for event in pygame.event.get():
    #         if event.type == pygame.QUIT:
    #             pygame.quit()
    #             sys.exit()
    #         elif event.type == pygame.JOYBUTTONDOWN or event.type == pygame.KEYDOWN:
    #             waiting_for_input = False
    #             break
    #     time.sleep(0.1)
    start_menu()


def save_screenshot(screen):
    path = "/home/elisa/Dokumente/shared/snake/output/"
    if not os.path.exists(path+"img"):
        os.makedirs(path+"img")
    current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
    screenshot_filename = f"{path}img/screenshot_{current_time}.png"
    pygame.image.save(screen, screenshot_filename)
    print(f"Screenshot saved as {screenshot_filename}")

# Draw grid background
def draw_grid():
    screen.fill((255, 255, 255))
    for x in range(0, n):
        for y in range(0, m):
            rect = pygame.Rect(x*cell_size, y*cell_size, cell_size, cell_size)
            pygame.draw.rect(screen, (255, 255, 255) if (x+y) % 2 == 0 else (234, 234, 234), rect) 



    # N,nn*mm,75,25
def intervalFloat(i, maxim, upper=65, lower=25):
    y = 1.0- float((i)) / float((maxim))
    diff = int(str(upper))-int(str(lower))
    y = y*diff+int(str(lower))
    return y
    
def get_color(i, n):
    n = max(5,n)
    x = (1.0-float(i-1)/float(n-1))*0.5+0.3
    x=x*0.4+0.25
    r,g,b,a = matplotlib.colormaps['viridis'](x)
    return (r*255,g*255,b*255)

def genfood(snake):
    while 1:
        food = [random.randrange(0, n) +1 ,
            random.randrange(0, m) +1 ]
        if food not in snake:
            break
        if len(snake) >= n*m:
            food=[-2,-2]
            break
    return food

# Initialize game
def init_game():
    global snake, direction, food, steps, stepstotal, start_time, times
    snake = [[1,1]]
    #print("init")
    direction = 'RIGHT'
    food = genfood(snake)
    steps = [0]*(n*m)
    stepstotal = 0
    start_time = datetime.now()
    times = [0.0]*(n*m)


# Main game loop
pygame.joystick.init()
joysticks = []
for i in range(pygame.joystick.get_count()):
    joystick = pygame.joystick.Joystick(i)
    joystick.init()
    joysticks.append(joystick)

def main_game():
    global direction, steps, food, stepstotal, cell_size, width, height, times, snake
    toggle = False
    death = True
    # pygame.joystick.init()
    # if pygame.joystick.get_count() > 0:
    #     joystick = pygame.joystick.Joystick(0)
    #     joystick.init()
    #     #print(f"Detected joystick: {joystick.get_name()}")
    # else:
    #     print("No joystick detected")

    cell_size = min(width/n,height/m)
    load_svg(cell_size)
    snake=[[1,1]]
    #print("main")
    while len(snake)<n*m:
        key_pressed = False
        #resize = False
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and direction != 'DOWN':
                    direction = 'UP'
                    key_pressed = True
                elif event.key == pygame.K_DOWN and direction != 'UP':
                    direction = 'DOWN'
                    key_pressed = True
                elif event.key == pygame.K_LEFT and direction != 'RIGHT':
                    direction = 'LEFT'
                    key_pressed = True
                elif event.key == pygame.K_RIGHT and direction != 'LEFT':
                    direction = 'RIGHT'
                    key_pressed = True
                if event.key == pygame.K_HASH:  # '#' key is pressed
                    #print("screenshot")
                    save_screenshot(screen)
                if event.key == pygame.K_t:  # 't' key is pressed
                    toggle = not toggle
                if event.key == pygame.K_a:  # 'a' key is pressed                    
                    food = genfood(snake)
                if event.key == pygame.K_d:  # 'a' key is pressed                    
                    death = not death
                if event.key == pygame.K_ESCAPE:  # 'esc' key is pressed                    
                    game_over()
                if event.key == pygame.K_MINUS:  # '-' key is pressed                    
                    snake.pop()
                if event.key == pygame.K_PLUS:  # '+' key is pressed    
                    if len(snake)>2:                
                        snake = snake[1:]
                #if event.key == pygame.K_LESS:  # '<' key is pressed                    
                #    width = 40*80                
                #    height = 32*80
            elif event.type == JOYAXISMOTION:

                if event.axis == 0:  # X-axis
                    if event.value < -0.95:
                        direction = 'LEFT'
                        key_pressed = True
                    elif event.value > 0.95:
                        direction = 'RIGHT'
                        key_pressed = True
                elif event.axis == 1:  # Y-axis
                    if event.value < -0.95:
                        direction = 'UP'
                        key_pressed = True
                    elif event.value > 0.95:
                        direction = 'DOWN'
                        key_pressed = True
            
            elif event.type == pygame.VIDEORESIZE:
                #global width, height
                width, height = event.size
                #screen = pygame.display.set_mode((width, height), pygame.RESIZABLE)
                cell_size = min(width/n,height/m)
                load_svg(cell_size)
                #resize = True
                print("resize",width,height)		
            

        # Move the snake only if a key is pressed
        if key_pressed:
            steps[len(snake)] += 1
            stepstotal += 1


            head_x, head_y = snake[0]
            if direction == 'UP':
                head_y -= 1
            elif direction == 'DOWN':
                head_y += 1
            elif direction == 'LEFT':
                head_x -= 1
            elif direction == 'RIGHT':
                head_x += 1

            # Check for collision with walls
            
            wall = head_x <= 0 or head_x > n or head_y <= 0 or head_y > m
            #    game_over()
            carnivore = False
            # Check for collision with itself
            if [head_x, head_y] in snake:
                if [head_x, head_y] != snake[-1]:
                    if death:
                        game_over()
                    else:
                        carnivore = True

            # Move snake by adding the new head and removing the tail
            if not wall and not carnivore:
                snake.insert(0, [head_x, head_y])
                if snake[0] == food:
                    #print("StartFood", len(snake))
                    diff = datetime.now() - start_time
                    times[len(snake)-1] = diff.total_seconds()
                    food = genfood(snake)
                    #visualize_stats(False)
                else:
                    if not toggle:
                        snake.pop()
                    else: 
                        diff = datetime.now() - start_time
                        times[len(snake)-1] = diff.total_seconds()
                        #print(times)
        #print("DoneFood", len(snake))
        # Draw everything

        
        #if key_pressed or resize:
        
        draw_grid()
        alt = None
        for index, segment in enumerate(snake):
            radius = max(cell_size // 2, int(cell_size * (len(snake) - index) / len(snake)))  # Decrease radius towards the tail
            radius = intervalFloat(index,n*m)/80*cell_size
            color = get_color(index, len(snake))
            #print(color)
            if not alt == None:
                x = min(segment[0] , alt[0])
                y = min(segment[1] , alt[1])
                dx = abs(segment[0] - alt[0])
                if dx == 0:
                    pygame.draw.rect(screen, color, (x*cell_size-radius//2- cell_size // 2, y*cell_size-cell_size//2, 
                                             radius, cell_size), 0,3)
                else:
                    pygame.draw.rect(screen, color, (x*cell_size-cell_size//2, y*cell_size-radius//2 - cell_size // 2, 
                                             cell_size, radius), 0,3)
            alt = segment
        for index, segment in enumerate(snake):
            radius = max(cell_size // 2, int(cell_size * (len(snake) - index) / len(snake)))  # Decrease radius towards the tail
            radius = intervalFloat(index,n*m)/80*cell_size
            color = get_color(index, len(snake))
            pygame.draw.rect(screen, color, (segment[0]*cell_size-radius//2- cell_size // 2, segment[1]*cell_size-radius//2- cell_size // 2, 
                                             radius, radius), 0,3)
        draw_svg("eyes",((snake[0][0]-1)*cell_size,(snake[0][1]-1)*cell_size), cell_size)
        #pygame.draw.circle(screen, red, (food[0] * cell_size - cell_size // 2, food[1] * cell_size - cell_size // 2), cell_size // 2)
        draw_svg("apple",((food[0]-1)*cell_size,(food[1]-1)*cell_size), cell_size)

        # Draw score
        #score_text = font.render(f'Score: {score}', True, black)
        #screen.blit(score_text, [0, 0])

        #print("Draw")
        pygame.display.flip()
        clock.tick(fps)
        time.sleep(0.1)
    if len(snake) ==n*m:
        game_over()   

# Start menu
def start_menu():
    menu = pygame_menu.Menu('Welcome', width, height, theme=pygame_menu.themes.THEME_GREEN)
    if len(snake)>1:
        menu.add.label(f"previous stats", align=pygame_menu.locals.ALIGN_LEFT)
        menu.add.label(f" length {len(snake)}, {int(sum(steps))} steps, {int(times[len(snake)-1])}s", align=pygame_menu.locals.ALIGN_LEFT)


    menu.add.button('Play', start_game)
    menu.add.text_input('Width: ', default=str(m), onchange=set_width)
    menu.add.text_input('Height: ', default=str(n), onchange=set_height)
    menu.add.button('Quit', pygame_menu.events.EXIT)
    
    #imw = menu.add.image(image_path="stats.png")
    #imw.translate(width,0)
    while True:
            events = pygame.event.get()
            
            # Handle joystick events
            for event in events:
                if event.type == pygame.JOYBUTTONDOWN:
                    print(f"Joystick button {event.button} pressed")
                    if event.button in [0, 1, 2, 3, 4, 5]:  # Buttons 0-3
                        # Perform the action of the currently selected widget
                        selected_widget = menu.get_selected_widget()
                        if isinstance(selected_widget, pygame_menu.widgets.Button):
                            selected_widget.apply()
                        elif isinstance(selected_widget, pygame_menu.widgets.TextInput):
                            # To simulate pressing Enter in a text input widget
                            selected_widget.apply()
                if event.type == pygame.JOYHATMOTION:
                    if event.value == (0, 1):  # Up
                        menu._select_previous_widget()
                    if event.value == (0, -1):  # Down
                        menu._select_next_widget()

            # Update the menu with events
            menu.update(events)
            menu.draw(screen)

            # Flip the display
            pygame.display.flip()
            time.sleep(0.1)

def set_height(value):
    global m
    if value =='':
        return
    if (int(value)>0):
        m = int(value)

def set_width(value):
    global n
    if value =='':
        return
    if (int(value)>0):
        n = int(value)

def start_game():
    global screen
    screen = pygame.display.set_mode((width, height), pygame.RESIZABLE)
    init_game()
    main_game()

# Main
#threading.Thread(target=display_plot, daemon=True).start()
screen = pygame.display.set_mode((width, height), pygame.RESIZABLE)
start_menu()